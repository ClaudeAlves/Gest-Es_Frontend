/**
 * Gest-ES Api
 * This api provides communication with a database for a TB project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: claude-andre.inacioalves@heig-vd.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiMessageDTO from '../model/ApiMessageDTO';
import LoginRequestDTO from '../model/LoginRequestDTO';
import LoginSuccessDTO from '../model/LoginSuccessDTO';
import RegisterDTO from '../model/RegisterDTO';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthenticationApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginSuccessDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * This public endpoint is used to login an existing user.
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginRequestDTO} opts.loginRequestDTO 
     * @param {module:api/AuthenticationApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginSuccessDTO}
     */
    login(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginSuccessDTO;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AuthenticationApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout.
     * This private endpoint is used to logout a logged user.
     * @param {module:api/AuthenticationApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/auth/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/AuthenticationApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user.
     * This public endpoint is used to register a new user.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterDTO} opts.registerDTO 
     * @param {module:api/AuthenticationApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    register(opts, callback) {
      opts = opts || {};
      let postBody = opts['registerDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
