/**
 * Gest-ES Api
 * This api provides communication with a database for a TB project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: claude-andre.inacioalves@heig-vd.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiMessageDTO from '../model/ApiMessageDTO';

/**
* Organisation service.
* @module api/OrganisationApi
* @version 1.0.0
*/
export default class OrganisationApi {

    /**
    * Constructs a new OrganisationApi. 
    * @alias module:api/OrganisationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the classToStudent operation.
     * @callback module:api/OrganisationApi~classToStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subs a student to a class.
     * @param {Number} idClass 
     * @param {Number} idStudent 
     * @param {module:api/OrganisationApi~classToStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    classToStudent(idClass, idStudent, callback) {
      let postBody = null;
      // verify the required parameter 'idClass' is set
      if (idClass === undefined || idClass === null) {
        throw new Error("Missing the required parameter 'idClass' when calling classToStudent");
      }
      // verify the required parameter 'idStudent' is set
      if (idStudent === undefined || idStudent === null) {
        throw new Error("Missing the required parameter 'idStudent' when calling classToStudent");
      }

      let pathParams = {
        'idClass': idClass,
        'idStudent': idStudent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/class/{idClass}/student/{idStudent}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the courseToClass operation.
     * @callback module:api/OrganisationApi~courseToClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subs a class to a course.
     * @param {Number} idCourse 
     * @param {Number} idClass 
     * @param {module:api/OrganisationApi~courseToClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    courseToClass(idCourse, idClass, callback) {
      let postBody = null;
      // verify the required parameter 'idCourse' is set
      if (idCourse === undefined || idCourse === null) {
        throw new Error("Missing the required parameter 'idCourse' when calling courseToClass");
      }
      // verify the required parameter 'idClass' is set
      if (idClass === undefined || idClass === null) {
        throw new Error("Missing the required parameter 'idClass' when calling courseToClass");
      }

      let pathParams = {
        'idCourse': idCourse,
        'idClass': idClass
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/course/{idCourse}/class/{idClass}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moduleToStudent operation.
     * @callback module:api/OrganisationApi~moduleToStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subs a student to a module.
     * @param {Number} idModule 
     * @param {Number} idStudent 
     * @param {module:api/OrganisationApi~moduleToStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    moduleToStudent(idModule, idStudent, callback) {
      let postBody = null;
      // verify the required parameter 'idModule' is set
      if (idModule === undefined || idModule === null) {
        throw new Error("Missing the required parameter 'idModule' when calling moduleToStudent");
      }
      // verify the required parameter 'idStudent' is set
      if (idStudent === undefined || idStudent === null) {
        throw new Error("Missing the required parameter 'idStudent' when calling moduleToStudent");
      }

      let pathParams = {
        'idModule': idModule,
        'idStudent': idStudent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/module/{idModule}/student/{idStudent}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectToCourse operation.
     * @callback module:api/OrganisationApi~subjectToCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a subject to a course.
     * @param {Number} idSubject 
     * @param {Number} idCourse 
     * @param {module:api/OrganisationApi~subjectToCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    subjectToCourse(idSubject, idCourse, callback) {
      let postBody = null;
      // verify the required parameter 'idSubject' is set
      if (idSubject === undefined || idSubject === null) {
        throw new Error("Missing the required parameter 'idSubject' when calling subjectToCourse");
      }
      // verify the required parameter 'idCourse' is set
      if (idCourse === undefined || idCourse === null) {
        throw new Error("Missing the required parameter 'idCourse' when calling subjectToCourse");
      }

      let pathParams = {
        'idSubject': idSubject,
        'idCourse': idCourse
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/subject/{idSubject}/course/{idCourse}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectToModule operation.
     * @callback module:api/OrganisationApi~subjectToModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a subject to a module.
     * @param {Number} idModule 
     * @param {Number} idSubject 
     * @param {module:api/OrganisationApi~subjectToModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    subjectToModule(idModule, idSubject, callback) {
      let postBody = null;
      // verify the required parameter 'idModule' is set
      if (idModule === undefined || idModule === null) {
        throw new Error("Missing the required parameter 'idModule' when calling subjectToModule");
      }
      // verify the required parameter 'idSubject' is set
      if (idSubject === undefined || idSubject === null) {
        throw new Error("Missing the required parameter 'idSubject' when calling subjectToModule");
      }

      let pathParams = {
        'idModule': idModule,
        'idSubject': idSubject
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/module/{idModule}/subject/{idSubject}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectToStudent operation.
     * @callback module:api/OrganisationApi~subjectToStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subs a student to a subject.
     * @param {Number} idSubject 
     * @param {Number} idStudent 
     * @param {module:api/OrganisationApi~subjectToStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    subjectToStudent(idSubject, idStudent, callback) {
      let postBody = null;
      // verify the required parameter 'idSubject' is set
      if (idSubject === undefined || idSubject === null) {
        throw new Error("Missing the required parameter 'idSubject' when calling subjectToStudent");
      }
      // verify the required parameter 'idStudent' is set
      if (idStudent === undefined || idStudent === null) {
        throw new Error("Missing the required parameter 'idStudent' when calling subjectToStudent");
      }

      let pathParams = {
        'idSubject': idSubject,
        'idStudent': idStudent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/subject/{idSubject}/student/{idStudent}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teacherToCourse operation.
     * @callback module:api/OrganisationApi~teacherToCourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMessageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a teacher to a course.
     * @param {Number} idCourse 
     * @param {Number} idTeacher 
     * @param {module:api/OrganisationApi~teacherToCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMessageDTO}
     */
    teacherToCourse(idCourse, idTeacher, callback) {
      let postBody = null;
      // verify the required parameter 'idCourse' is set
      if (idCourse === undefined || idCourse === null) {
        throw new Error("Missing the required parameter 'idCourse' when calling teacherToCourse");
      }
      // verify the required parameter 'idTeacher' is set
      if (idTeacher === undefined || idTeacher === null) {
        throw new Error("Missing the required parameter 'idTeacher' when calling teacherToCourse");
      }

      let pathParams = {
        'idCourse': idCourse,
        'idTeacher': idTeacher
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiMessageDTO;
      return this.apiClient.callApi(
        '/organisation/course/{idCourse}/teacher/{idTeacher}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
