openapi: '3.0.3'
servers:
  - description: Api Gest-ES
    url: http://localhost:8081
info:
  description: This api provides communication with a database for a TB project
  version: "1.0.0"
  title: Gest-ES Api
  contact:
    email: claude-andre.inacioalves@heig-vd.ch
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: authentication
    description: Operation related to connection
  - name: user
    description: Operation related to user
  - name: calendar
    description: Operation related to the calendar
  - name: test
    description: Operation related to the tests
  - name: mark
    description: Operations related to the marks
  - name: absence
    description: Operations related to the absences
  - name: creation
    description: Operations needed to create the courses/module/subjects
  - name: organisation
    description: Operations needed to organise entities.
security:
  - JWTSecurity: []

### below paths ###
paths:
  ## authentication ##
  /auth/register:
    post:
      tags:
        - authentication
      security: []   # No security
      description: This public endpoint is used to register a new user.
      summary: Register a new user.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDTO'
      responses:
        '201':
          description: Register successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'

        '400':
          description: Username or Email Already taken.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /auth/login:
    post:
      tags:
        - authentication
      security: []   # No security
      description: This public endpoint is used to login an existing user.
      summary: Login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /auth/logout:
    post:
      tags:
        - authentication
      description: This private endpoint is used to logout a logged user.
      summary: Logout.
      operationId: logout
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  ## user endpoints ##
  /admin/users:
    get:
      tags:
        - User
      description: This private endpoint is used to get all users.
      summary: Get all users.
      operationId: getUsers
      responses:
        '200':
          description: Get users successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSimpleDTO'
    delete:
      tags:
        - User
      description: This private endpoint is used to remove all users.
      summary: Delete all users.
      operationId: deleteUsers
      responses:
        '200':
          description: Users deletion successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /users/{username}:
    get:
      tags:
        - User
      description: This private endpoint is used to get one user.
      summary: Get a specific user.
      operationId: getUser
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Get user successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
        - User
      description: This private endpoint is used to modify one user.
      summary: Update a specific user.
      operationId: updateUser
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserModificationDTO'
      responses:
        '200':
          description: User update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
        - User
      description: This private endpoint is used to remove one user.
      summary: Delete a specific user.
      operationId: deleteUser
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User deletion successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  ## calendar endpoints ##
  /calendar:
    get:
      tags:
        - calendar
      description: This endpoint is used to get the calendar of the authenticated user
      summary: Get a specific user calendar.
      operationId: getCalendarUser
      responses:
        '200':
          description: Get users calendar successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarDTO'
  /calendar/user/{userId}:
    get:
      tags:
        - calendar
      description: This endpoint is used to get the calendar of a user
      summary: Get a specific user calendar.
      operationId: getCalendar
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Get user calendar successfull.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarDTO'
  /calendar/class/{classId}:
    get:
      tags:
        - calendar
      description: This endpoint is used to get the calendar of a class
      summary: Get a class calendar.
      operationId: getClassCalendar
      parameters:
        - in: path
          name: classId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Get class calendar successfull.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarDTO'
  ## evaluation endpoints ##
  /marks/{idStudent}:
    get:
      tags:
        - mark
      description: This endpoint is used to get the marks of a student
      summary: Get marks.
      operationId: getStudentMarks
      parameters:
        - in: path
          name: idStudent
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Get student marks successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
  /evluation/test:
    post:
      tags:
        - test
      description: This endpoint is used to create a test
      summary: create test
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDTO'
      responses:
        '201':
          description: Creation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /evaluation/tests/{idCourse}/student/{idStudent}:
    get:
      tags:
        - test
      description: Get the t
      parameters:
        - in: path
          name: idCourse
          schema:
            type: string
          required: true
        - in: path
          name: idStudent
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Get student test successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
  ## organisation endpoints ##
  /organisation/module/{idModule}/student/{idStudent}:
    put:
      tags:
        - organisation
      description: Subs a student to a module.
      operationId: moduleToStudent
      parameters:
        - in: path
          name: idModule
          schema:
            type: string
          required: true
        - in: path
          name: idStudent
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /organisation/subject/{idSubject}/student/{idStudent}:
    put:
      tags:
        - organisation
      description: Subs a student to a subject.
      operationId: subjectToStudent
      parameters:
        - in: path
          name: idSubject
          schema:
            type: string
          required: true
        - in: path
          name: idStudent
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /organisation/class/{idClass}/student/{idStudent}:
    put:
      tags:
        - organisation
      description: Subs a student to a class.
      operationId: classToStudent
      parameters:
        - in: path
          name: idClass
          schema:
            type: string
          required: true
        - in: path
          name: idStudent
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /organisation/module/{idModule}/subject/{idSubject}:
    put:
      tags:
        - organisation
      description: Adds a subject to a module.
      operationId: subjectToModule
      parameters:
        - in: path
          name: idModule
          schema:
            type: string
          required: true
        - in: path
          name: idSubject
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /organisation/subject/{idSubject}/course/{idCourse}:
    put:
      tags:
        - organisation
      description: Adds a subject to a course.
      operationId: subjectToCourse
      parameters:
        - in: path
          name: idSubject
          schema:
            type: string
          required: true
        - in: path
          name: idCourse
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /organisation/course/{idCourse}/class/{idClass}:
    put:
      tags:
        - organisation
      description: Subs a class to a course.
      operationId: courseToClass
      parameters:
        - in: path
          name: idCourse
          schema:
            type: string
          required: true
        - in: path
          name: idClass
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /organisation/course/{idCourse}/teacher/{idTeacher}:
    put:
      tags:
        - organisation
      description: Adds a teacher to a course.
      operationId: teacherToClass
      parameters:
        - in: path
          name: idCourse
          schema:
            type: string
          required: true
        - in: path
          name: idTeacher
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  ## creation endpoints ##
  /creation/course:
    post:
      tags:
        - creation
      description: This endpoint is used to create a course.
      summary: create course.
      operationId: createCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDTO'
      responses:
        '201':
          description: Creation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /creation/module:
    post:
      tags:
        - creation
      description: This endpoint is used to create a module.
      summary: create module.
      operationId: createModule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '201':
          description: Creation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /creation/subject:
    post:
      tags:
        - creation
      description: This endpoint is used to create a subject.
      summary: create subject.
      operationId: createSubject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectDTO'
      responses:
        '201':
          description: Creation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
  /creation/holiday:
    post:
      tags:
        - creation
      description: This endpoint is used to create a period of holiday.
      summary: create holiday.
      operationId: createHoliday
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HolidayDTO'
      responses:
        '201':
          description: Creation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageDTO'
## components/DTOs ##
components:
  # Security
  securitySchemes:
    JWTSecurity:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # API message
    ApiMessageDTO:
      title: ApiMessageDTO
      type: object
      properties:
        code:
          type: integer
        type:
          type: string
        message:
          type: string
    # Register
    RegisterDTO:
      title: RegisterDTO
      type: object
      properties:
        username:
          type: string
          example: 'Polo'
        email:
          type: string
          example: 'paul@mail.com'
        password:
          type: string
          example: 'luap4321'
        firstname:
          type: string
          example: 'Paul'
        lastname:
          type: string
          example: 'Dupont'
    # Login
    LoginRequestDTO:
      title: LoginRequestDTO
      type: object
      properties:
        usernameOrEmail:
          type: string
          example: 'Polo'
        password:
          type: string
          example: 'luap4321'
    LoginSuccessDTO:
      title: LoginSuccessDTO
      type: object
      properties:
        jwt:
          type: string
        username:
          type: string
        roles:
          type: array
          items:
            type: string
    # User
    RoleDTO:
      title: RoleDTO
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          nullable: true
    UserDTO:
      title: UserDTO
      type: object
      properties:
        idUser:
          type: integer
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDTO'
    UserModificationDTO:
      title: UserModificationDTO
      type: object
      properties:
        idUser:
          type: integer
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        birthdate:
          type: string
          format: date
        email:
          type: string
        password:
          type: string
    UserSimpleDTO:
      title: UserSimpleDTO
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        birthdate:
          type: string
          format: date
        email:
          type: string
    # Organisation
    CourseDTO:
      title: CourseDTO
      type: object
      properties:
        name:
          type: string
    ModuleDTO:
      title: ModuleDTO
      type: object
      properties:
        name:
          type: string
    SubjectDTO:
      title: SubjectDTO
      type: object
      properties:
        name:
          type: string
    # Calendar
    CalendarDTO:
      title: CalendarDTO
      type: object
      properties:
        periods:
          type: array
          items:
            $ref: '#/components/schemas/PeriodDTO'
    HolidayDTO:
      title: HolidayDTO
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: begin of the holiday
          example: "2021-01-30T08:30:00Z"
        end:
          type: string
          format: date-time
          description: end of the holiday
          example: "2021-01-30T08:30:00Z"
        text:
          type: string
          description: description of the holiday
    PeriodDTO:
      title: PeriodDTO
      type: object
      properties:
        id:
          type: integer
        tag:
          type: string
        start:
          type: string
          format: date-time
          description: begin of the period
          example: "2021-01-30T08:30:00Z"
        end:
          type: string
          format: date-time
          description: end of the period
          example: "2021-01-30T08:30:00Z"
        text:
          type: string
          description: description of the period
    # Evaluation
    TestDTO:
      title: TestDTO
      type: object
      properties:
        courseId:
          type: integer
        start:
          type: string
          format: date-time
          description: begin of the period
          example: "2021-01-30T08:30:00Z"
        end:
          type: string
          format: date-time
          description: end of the period
          example: "2021-01-30T08:30:00Z"
        text:
          type: string
          description: description of the period
    MarkDTO:
      title: MarkDTO
      type: object
      properties:
        testId:
          type: integer
        studentId:
          type: integer
        value:
          type: integer

